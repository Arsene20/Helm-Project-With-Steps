Step 0: 
    0.1.Update packages:
        sudo apt update
    0.2.Install tree:
        sudo apt install tree

Step 1: Install AWS CLI
    1.1 Download the AWS CLI installer:
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    1.2 Install the unzip utility (if not already installed on your system):
        sudo apt install unzip
    1.3 Unzip the installer:
        unzip awscliv2.zip
    1.4 Run the installer:
        sudo ./aws/install
    1.5 Configure AWS CLI:
        aws configure


// AWS CLI INSTALLATION COMMANDS:

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
sudo apt install unzip
unzip awscliv2.zip
sudo ./aws/install
aws configure


Step 2: Clone the Terraform Project and Deploy EKS
    2.1.Clone the Terraform project folder and navigate to it:
        git clone <terraform_project_repo>
    2.2.Install Terraform:
        sudo snap install terraform --classic
    2.3.Navigate to the Terraform project folder:
        cd <terraform_project_folder>
    2.4.Initialize Terraform:
        terraform init
    2.5.Review the Terraform plan:
        terraform plan
    2.6.If the plan looks good, apply it to deploy the resources:
        terraform apply --auto-approve

// TERRAFORM COMMANDS:

git clone <terraform_project_repo>
sudo snap install terraform --classic
cd <terraform_project_folder>
terraform init
terraform plan
terraform apply --auto-approve

Step 3: Install kubectl
    3.1.Download and install kubectl binary: (https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/)
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    3.2.Make the binary executable:
        chmod +x kubectl
    3.3.Move the binary to a directory in your PATH:
        sudo mv kubectl /usr/local/bin/
    3.4.Verify the installation:
        kubectl version --client

// KUBECTL COMMANDS:

curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x kubectl
sudo mv kubectl /usr/local/bin/
kubectl version --client

Step 4: Install eksctl (Follow these steps to install eksctl, a CLI tool for managing EKS clusters):
    4.1.Download and install eksctl binary: (https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html)
        curl -LO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz"
    4.2.Extract the tarball: 
        tar -xzf eksctl_Linux_amd64.tar.gz
    4.3.Move the binary to a system PATH directory, such as /usr/local/bin/:
        sudo mv eksctl /usr/local/bin/
    4.4.Verify the installation:
        eksctl version

// EKSCTL COMMANDS:

curl -LO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz"
tar -xzf eksctl_Linux_amd64.tar.gz
sudo mv eksctl /usr/local/bin/
eksctl version

Step 5: Update kubeconfig for the EKS Cluster
    5.1.Update the kubeconfig file to include the EKS cluster:
        Run the following command to update the kubeconfig file with your EKS cluster details:
        aws eks --region <region> update-kubeconfig --name <name>
        Replace the placeholders with your actual values:
            -region: The AWS region where your EKS cluster is located.
            -name: The name of your EKS cluster. 
        For example:
        aws eks --region us-east-1 update-kubeconfig --name devopsshack-cluster
        This command retrieves the kubeconfig configuration for the devopsshack-cluster and stores it in the default kubeconfig file (e.g., ~/.kube/config).
        You can then use kubectl to interact with your EKS cluster.
        For example:
        kubectl get nodes

// KUBECONFIG COMMANDS:

aws eks --region us-east-1 update-kubeconfig --name devopsshack-cluster
kubectl get nodes

Step 6: Associate IAM OIDC Provider with EKS Cluster
    6.1.Associate the IAM OIDC provider with your EKS cluster:
        eksctl utils associate-iam-oidc-provider --region <region> --cluster <cluster_name> --approve
        Replace the placeholders with your actual values:
            -region: The AWS region where your EKS cluster is located.
            -cluster_name: The name of your EKS cluster.
        For example:
        eksctl utils associate-iam-oidc-provider --region us-east-1 --cluster devopsshack-cluster --approve
        This command associates the IAM OIDC provider with your EKS cluster, enabling you to use IAM roles for service accounts (IRSA) in your cluster.

// IAM OIDC COMMANDS:
eksctl utils associate-iam-oidc-provider --region us-east-1 --cluster devopsshack-cluster --approve

Step 7: Create an IAM Service Account for the EKS Cluster (Create a Kubernetes service account with IAM permissions for the Amazon EBS CSI Driver: https://docs.aws.amazon.com/eks/latest/userguide/csi-iam-role.html#csi-iam-role-create-service-account)
    7.1.Create an IAM service account for the EKS cluster:
        eksctl create iamserviceaccount
        --region <region> \ 
        --name <service_account_name> \ 
        --namespace <namespace> \ 
        --cluster <cluster_name> \ 
        --attach-policy-arn <policy_arn> \
        --approve\ 
        --override-existing-serviceaccounts
        Replace the placeholders with your actual values:
            -service_account_name: The name of the IAM service account.
            -namespace: The namespace in which the service account will be created.
            -cluster_name: The name of your EKS cluster.
            -policy_arn: The ARN of the IAM policy to attach to the service account.
            -region: The AWS region where your EKS cluster is located.
        For example:
        eksctl create iamserviceaccount --region us-east-1 --name ebs-csi-controller-sa --namespace kube-system --cluster devopsshack-cluster --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy --approve --override-existing-serviceaccounts
            --region us-east-1: AWS region where the EKS cluster is located.
            --cluster devopsshack-cluster: Name of the EKS cluster.
            --name ebs-csi-controller-sa: Name of the service account.
            --namespace kube-system: Namespace where the service account will be created.
            --attach-policy-arn: IAM policy ARN for EBS CSI Driver permissions.
            --approve: Automatically approve the creation.
            --override-existing-serviceaccounts: Override existing service accounts if they exist.
        This command creates an IAM service account named aws-load-balancer-controller in the kube-system namespace of the devopsshack-cluster and attaches the AWSLoadBalancerControllerIAMPolicy policy to it.

    7.2.If the command fails, check the CloudFormation stack for errors and delete the failed stack:
        a. Delete the stack using the AWS CLI command:
            aws cloudformation delete-stack --stack-name EKS-devopsshack-cluster
        b. Delete the IAM service account using the eksctl command:
            eksctl delete iamserviceaccount \
                --region us-east-1 \
                --cluster devopsshack-cluster \
                --name aws-load-balancer-controller \
                --namespace kube-system
        c. Delete the stack using the CloudFormation console:
        Go to the CloudFormation console.
            Find the failed stack.
            Click on the stack name to open its details.
            Click on the "Delete" button.
            Confirm the deletion.

// IAM SERVICE ACCOUNT COMMANDS:
eksctl create iamserviceaccount 
--region us-east-1 
--name ebs-csi-controller-sa 
--namespace kube-system 
--cluster devopsshack-cluster 
--attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy 
--approve 
--override-existing-serviceaccounts

Step 8: Deploy the AWS EBS CSI Driver
    8.1.Deploy the Amazon EBS CSI Driver using the following command:
        kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/ecr/?ref=release-1.11"
        This command deploys the Amazon EBS CSI Driver in your EKS cluster.
    8.2.2.Verify that the service account is created:
        kubectl get sa -n kube-system ebs-csi-controller-sa
        This command lists the service accounts in the kube-system namespace and verifies that the ebs-csi-controller-sa service account is created.
    8.3.Verify the deployment:
        kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-ebs-csi-driver
        This command lists the pods running the Amazon EBS CSI Driver in the kube-system namespace.
    8.4.If the pods are not running, check the logs for errors:
        kubectl logs -n kube-system -l app.kubernetes.io/name=aws-ebs-csi-driver
        This command displays the logs for the Amazon EBS CSI Driver pods.

// EBS CSI DRIVER COMMANDS:
kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/ecr/?ref=release-1.11"
kubectl get sa -n kube-system ebs-csi-controller-sa
kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-ebs-csi-driver
kubectl logs -n kube-system -l app.kubernetes.io/name=aws-ebs-csi-driver

Set 9: Install Helm on Linux:
    9.1.Download the Helm installation script:
        curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    9.2.Verify the installation:
        helm version
        This command displays the version of Helm installed on your system.
    9.3.Create a Helm chart:
        helm create mychart
        This command creates a new Helm chart named "mychart" in the current directory.
    9.4.Install the Helm chart:
        helm install myrelease ./mychart
        This command installs the Helm chart release name "myrelease" in the current directory.
    9.5.List the Helm releases:
        helm list
        This command lists all the Helm releases installed in the current Kubernetes cluster.
    9.6.Uninstall the Helm release:
        helm uninstall myrelease
        This command uninstalls the Helm release "myrelease".

    BONUS:
    9.7.Upgrade the Helm release:
        helm upgrade myrelease ./mychart
        This command upgrades the Helm release "myrelease" with the updated chart "mychart".
    9.8.Rollback the Helm release:
        helm rollback myrelease 1
        This command rolls back the Helm release "myrelease" to the previous revision (revision 1).
    9.9.Get the status of the Helm release:
        helm status myrelease
        This command displays the status of the Helm release "myrelease".
    9.10.Get the values of the Helm release:
        helm get values myrelease
        This command displays the values of the Helm release "myrelease".
    9.11.Get the manifest of the Helm release:
        helm get manifest myrelease
        This command displays the manifest of the Helm release "myrelease".
    9.12.Get the notes of the Helm release:
        helm get notes myrelease
        This command displays the notes of the Helm release "myrelease".
    9.13.List the installed releases:
        helm list
        This command lists all the installed Helm releases.

    EXEMPLE OF DEPLOYING A CHART IN MUTIPLE ENVIRONMENTS AND NAMESPACES:

    kubectl create ns dev
    kubectl create ns staging
    kubectl create ns qa
    kubectl create ns ppq
    kubectl create ns prod

    helm install myrelease ./mychart -f dev-values.yaml -namespace dev
    helm install myrelease ./mychart -f staging-values.yaml -namespace staging
    helm install myrelease ./mychart -f qa-values.yaml -namespace qa
    helm install myrelease ./mychart -f ppq-values.yaml -namespace ppq
    helm install myrelease ./mychart -f prod-values.yaml -namespace prod  

    helm list --namespaces dev
    helm list --namespaces staging
    helm list --namespaces qa
    helm list --namespaces ppq
    helm list --namespaces prod

    kubectl get all -namespace dev
    kubectl get all -namespace staging
    kubectl get all -namespace qa
    kubectl get all -namespace ppq
    kubectl get all -namespace prod

#### 
Set 10: Add bitnami Helm Repository (Optionalonally, if you want to use charts from the bitnami repository):

    bitnami is a popular Helm chart repository that provides a wide range of charts for various applications and services.
    By adding the bitnami repository, you can easily install and manage these charts using Helm.
    This step is optional and can be skipped if you do not want to use charts from the bitnami repository.
    However, it is recommended to add the bitnami repository to take advantage of the wide range of charts available.
    The following steps will guide you through adding the bitnami repository and using it to install charts.

    To add the bitnami repository, follow these steps:
    10.1.Add the bitnami Helm repository:
        helm repo add bitnami https://charts.bitnami.com/bitnami
    10.2.Update the Helm repositories:
        helm repo update
        This command updates the Helm repositories to ensure you have the latest charts available.
    10.3.Search for available charts in the bitnami repository:
        helm repo search nginx
        This command lists the available charts in the bitnami repository that match the search term "nginx".
    10.4.Install a chart from the bitnami repository:
        helm install my-nginx bitnami/nginx
        This command installs the nginx chart from the bitnami repository with the release name "my-nginx".
    10.5.Verify the installation:
        helm list
        This command lists the Helm releases installed on your system.
    10.6.Check the status of the release:
        helm status my-nginx
        This command displays the status of the Helm release with the name "my-nginx".
        It shows the resources created by the release and their current status.
    10.7.Uninstall a Helm release:
        helm uninstall my-nginx
        This command uninstalls the Helm release with the name "my-nginx".
    10.8.Verify the uninstallation:
        helm list
        This command lists the Helm releases installed on your system and verifies that the release "my-nginx" is uninstalled.
    10.9.Remove the bitnami Helm repository:
        helm repo remove bitnami
        This command removes the bitnami Helm repository from your system.
    10.10.Verify the removal:
        helm repo list
        This command lists the Helm repositories configured on your system and verifies that the bitnami repository is removed.
    10.11.Rollback a Helm release:
        helm rollback my-nginx 1
        This command rolls back the Helm release with the name "my-nginx" to the previous revision (revision 1).
        You can specify a different revision number to roll back to a specific version.
    10.12.Verify the rollback:
        helm history my-nginx
        This command displays the revision history of the Helm release with the name "my-nginx".
        It shows the revisions and their status, allowing you to verify the rollback.
    10.13.If you encounter any issues, check the Helm documentation or seek help from the Helm community.

// EXEMPLE ADDING SONARQUBE HELM REPOSITORY:
    helm repo add sonarqube https://SonarSource.github.io/helm-chart-sonarqube
    helm repo update
    helm repo search sonarqube
    helm install my-sonarqube sonarqube/sonarqube
    helm list
    helm status my-sonarqube
    helm uninstall my-sonarqube
    helm repo remove sonarqube
    helm repo list
    helm rollback my-sonarqube 1
    helm history my-sonarqube


####

Step 9: Deploy Application Using Manifest File
    9.1.Apply the manifest file to deploy the application:
        kubectl apply -f <manifest_file>
        Replace <manifest_file> with the path to your manifest file.
        For example:
        kubectl apply -f manifest.yaml
    9.2.Verify the deployment:
        kubectl get pods
        This command lists the pods running in your EKS cluster.
    9.3.If the pods are not running, check the logs for errors:
        kubectl logs <pod_name>
        Replace <pod_name> with the name of the pod.
        For example:
        kubectl logs my-app-pod
        This command displays the logs for the specified pod.

// MANIFEST FILE COMMANDS:
kubectl apply -f <manifest_file>
kubectl get pods
kubectl logs <pod_name>